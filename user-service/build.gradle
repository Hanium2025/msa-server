buildscript {
    ext {
        protobufVersion = '4.28.2'
        protobufPluginVersion = '0.9.4'
        grpcVersion = '1.65.1'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.7'

    // Protobuf 플러그인을 적용하여 .proto 파일을 컴파일할 수 있다. 여기서 버전은 ext에 정의된 protobufPluginVersion을 사용한다.
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
    }
}

bootJar {
    archiveBaseName.set('user_service')
    archiveVersion.set('')
    archiveClassifier.set('')
}
dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //zipkin
    implementation 'io.zipkin.brave:brave-instrumentation-grpc:5.13.3'
    implementation 'io.micrometer:micrometer-tracing:1.1.6'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.1.6'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave:2.16.3'
    implementation 'io.zipkin.reporter2:zipkin-sender-okhttp3:2.16.3'
    implementation 'io.zipkin.zipkin2:zipkin:2.23.16'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    // data jpa, h2, postgresql, redis
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct 설정
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // grpc 프로토콜 버터를 사용하기 위한 핵심 라이브러리 (Protobuf 메시지의 직렬화 및 역직렬화를 지원합니다.)
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // grpc 서버, 클라이언트 설정
    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE' // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}" // Netty Shaded 사용(gRPC 서버와 클라이언트의 Netty 전송 계층을 제공)
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"     // Protobuf 메시지와 gRPC의 통합을 지원
    implementation "io.grpc:grpc-stub:${grpcVersion}"         // gRPC 클라이언트 스텁을 생성
    implementation 'javax.annotation:javax.annotation-api:1.3.2' // 이걸 추가해야 gRPC 컴파일시 javax 어노테이션 오류가 발생하지 않는다.

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'


    // json 타입을 DB에 저장하기 위한 라이브러리
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation project(':common')

    // Grpc-Test-Support
    // json 타입을 DB에 저장하기 위한 라이브러리
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

//    // Grpc-Test-Support
//    testImplementation("io.grpc:grpc-testing")

    // Spring-Test-Support
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-config'
    }
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.security:spring-security-test'
//    testRuntimeOnly 'com.h2database:h2'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'commons-codec:commons-codec:1.13'
    implementation 'com.auth0:java-jwt:3.13.0'

    // common 모듈 사용
    implementation project(':common')

    //
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // CoolSMS
    implementation 'net.nurigo:sdk:4.2.7'

    // WebClient (Spring WebFlux)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // AWS S3
    implementation "software.amazon.awssdk:s3:2.17.217"

    //prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

springBoot {
    mainClass = 'hanium.user_service.UserServiceApplication'
}

protobuf {
    // Protobuf 컴파일러를 지정하여 .proto 파일을 컴파일합니다.
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
//    // 생성된 파일을 정리합니다.
//    clean {
//        delete generatedFilesBaseDir
//    }
    // gRPC 플러그인을 설정하여 Protobuf 파일로부터 gRPC 관련 코드를 생성합니다.
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    // 모든 프로토콜 버퍼 작업에 대해 gRPC 플러그인을 적용합니다.
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

tasks.named('compileJava') {
    dependsOn 'generateProto'
}


test {
    useJUnitPlatform()
}
